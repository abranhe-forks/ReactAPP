{"version":3,"sources":["components/GarageInfo.js","App.js","serviceWorker.js","index.js"],"names":["cardStyle","border","App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","react","className","Row","Col","Card","style","CardBody","CardTitle","garageName","spotsAvailableForStudents","totalStudentParking","percentFullStudents","spotsAvailableForEmployees","totalEmployeeParking","percentFullEmployees","Component","_this","state","INPUTHERE","_this2","fetch","then","results","json","data","setState","console","log","parkingGarageOuput","map","Garage","components_GarageInfo","key","GarageName","StudentMax","StudentSpaces","OtherMax","OtherSpaces","StudentFull","OtherFull","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAIMA,EAAY,CAChBC,OAAQ,qCAwCKC,cAnCb,SAAAA,EAAYC,GACX,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,6EAKC,OACEI,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,MAAOlB,GACXU,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KAAWV,EAAAC,EAAAC,cAAA,UAAKN,KAAKH,MAAMkB,aAC3BX,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBACCF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCAAyBN,KAAKH,MAAMmB,0BAApC,MAAkEhB,KAAKH,MAAMoB,qBAC7Eb,EAAAC,EAAAC,cAAA,0CAAkCN,KAAKH,MAAMqB,sBAEjDd,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBACHF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,kCAA0BN,KAAKH,MAAMsB,2BAArC,MAAoEnB,KAAKH,MAAMuB,sBAC/EhB,EAAAC,EAAAC,cAAA,2CAAmCN,KAAKH,MAAMwB,oCAxB9CC,aCsDH1B,cAzDb,SAAAA,EAAYC,GACZ,IAAA0B,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACE2B,EAAAzB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMH,KACD2B,MAAO,CACVC,UAAW,IAHfF,mFAOmB,IAAAG,EAAA1B,KAGjB2B,MADmB,gEAElBC,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SAEhBF,KAAM,SAAAG,GACLL,EAAKM,SAAS,CACZP,UAAWM,IAEbE,QAAQC,IAAIH,sCAQd,IAAMI,EAAqBnC,KAAKwB,MAAMC,UAAUW,IAC9C,SAACC,GACD,OACEjC,EAAAC,EAAAC,cAACgC,EAAD,CACAC,IAAKF,EAAOG,WACZzB,WAAYsB,EAAOG,WACnBxB,0BAA4BqB,EAAOI,WAAaJ,EAAOK,cACvDzB,oBAAqBoB,EAAOI,WAC5BtB,2BAA4BkB,EAAOM,SAAWN,EAAOO,YACrDxB,qBAAsBiB,EAAOM,SAC7BzB,oBAAqBmB,EAAOQ,YAC5BxB,qBAAsBgB,EAAOS,cAOjC,OACE1C,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACAH,EAAAC,EAAAC,cAAA,8BACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACd2B,WAnDSb,aCSEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.ea602b32.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport './GarageInfo.css';\r\nimport {Row,Card, CardBody, CardTitle, Col } from 'reactstrap';\r\n\r\nconst cardStyle = {\r\n  border: '2px solid rgba(248, 201, 62, 0.2)'\r\n}\r\n\r\nclass App extends Component \r\n{\r\n  constructor(props)\r\n  {\r\n    super();\r\n  }\r\n  render() \r\n  {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"GarageInfo\">\r\n          <Row>\r\n            <Col>\r\n              <Card style={cardStyle}>\r\n                <CardBody>\r\n                <CardTitle><h3>{this.props.garageName}</h3></CardTitle>\r\n                <p><b>Students:</b></p>\r\n                    <ul>\r\n                      <li>Student Spots Open: {this.props.spotsAvailableForStudents} / {this.props.totalStudentParking}</li>\r\n                      <li>Student Parking Spots Taken: {this.props.percentFullStudents}</li>\r\n                  </ul>\r\n                  <p><b>Employees:</b></p>\r\n                  <ul>\r\n                  <li>Employee Spots Open: {this.props.spotsAvailableForEmployees} / {this.props.totalEmployeeParking}</li>\r\n                  <li>Employee Parking Spots Taken: {this.props.percentFullEmployees}</li>\r\n                  </ul>\r\n                 \r\n                  </CardBody>\r\n                </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport GarageInfo from './components/GarageInfo';\r\nclass App extends Component \r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state= {\r\n      INPUTHERE: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    //Todo test api later\r\n    let FIU_API_LINK = \"https://m.fiu.edu/feeds//transit/v1/json.php?section=parking\";\r\n    fetch(FIU_API_LINK)\r\n    .then(results => {\r\n      return results.json();\r\n    })\r\n    .then( data =>{\r\n      this.setState({\r\n        INPUTHERE: data\r\n      });\r\n      console.log(data);\r\n    })\r\n  }\r\n\r\n  render() \r\n  {\r\n\r\n    //Todo Template, Finish this later\r\n    const parkingGarageOuput = this.state.INPUTHERE.map( \r\n      (Garage) =>{\r\n      return(\r\n        <GarageInfo\r\n        key={Garage.GarageName}\r\n        garageName={Garage.GarageName} \r\n        spotsAvailableForStudents={(Garage.StudentMax - Garage.StudentSpaces)}\r\n        totalStudentParking={Garage.StudentMax}\r\n        spotsAvailableForEmployees={Garage.OtherMax - Garage.OtherSpaces}\r\n        totalEmployeeParking={Garage.OtherMax}\r\n        percentFullStudents={Garage.StudentFull}\r\n        percentFullEmployees={Garage.OtherFull}\r\n        />);\r\n      \r\n\r\n    })\r\n\r\n\r\n    return (\r\n      <Fragment>\r\n      <h1>FIU Parking Info</h1>\r\n        <div className=\"App\">\r\n        {parkingGarageOuput}\r\n        </div>\r\n      </Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
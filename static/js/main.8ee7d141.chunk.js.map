{"version":3,"sources":["components/GarageInfo.js","App.js","serviceWorker.js","index.js"],"names":["cardStyle","border","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","activeTab","tab","setState","_this2","react_default","a","createElement","react","className","Card","style","CardBody","CardTitle","garageName","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","Row","Col","sm","viewBox","d","strokeDasharray","percentFullStudents","substring","length","x","y","spotsAvailableForStudents","totalStudentParking","percentFullEmployees","spotsAvailableForEmployees","totalEmployeeParking","Component","getInfo","fetch","then","results","json","data","INPUTHERE","console","log","FetchedAt","asof","catch","interval","setInterval","clearInterval","parkingGarageOuput","map","Garage","StudentSpaces","OtherSpaces","spotsAvailable","StudentMax","StudentFull","components_GarageInfo","key","GarageName","fetched","OtherMax","OtherFull","src","alt","width","color","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ee7d141.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport './GarageInfo.css';\r\nimport './test.css';\r\nimport {TabContent, TabPane, Nav, NavItem, NavLink, Card, CardTitle, Row, Col, CardBody} from 'reactstrap';\r\nimport classnames from 'classnames';\r\n\r\nconst cardStyle = {\r\n  border: '2px solid rgba(248, 201, 62, 0.2)'\r\n}\r\n\r\nclass App extends Component \r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = \r\n    {\r\n      activeTab: '1'\r\n    };\r\n  }\r\n\r\n  toggle(tab) \r\n  {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState(\r\n        {\r\n        activeTab: tab\r\n      });\r\n    }\r\n  }\r\n\r\n  render() \r\n  {\r\n    return (\r\n      <Fragment>\r\n          <div className=\"GarageInfo\">\r\n                <Card style={cardStyle}>\r\n                    <CardBody>\r\n                    <CardTitle><h3>{this.props.garageName}</h3></CardTitle>\r\n                    <div>\r\n\r\n                    <Nav tabs className=\"nav nav-tabs justify-content-center\">\r\n                      <NavItem>\r\n                        <NavLink\r\n                          className={classnames({ active: this.state.activeTab === '1' })}\r\n                          onClick={() => { this.toggle('1'); }}\r\n                        >\r\n                          Students\r\n                        </NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                        <NavLink\r\n                          className={classnames({ active: this.state.activeTab === '2' })}\r\n                          onClick={() => { this.toggle('2'); }}\r\n                        >\r\n                          Employees\r\n                        </NavLink>\r\n                      </NavItem>\r\n                    </Nav>\r\n                    \r\n                    <TabContent activeTab={this.state.activeTab} >\r\n                      <TabPane tabId=\"1\" >\r\n                        <Row>\r\n                          <Col sm=\"12\" >\r\n                          {/* <p><b>Students:</b></p> */}\r\n\r\n                            <div className=\"flex-wrapper\">\r\n                                <div className=\"single-chart\">\r\n                                  <svg viewBox=\"0 0 36 36\" className=\"circular-chart red\">\r\n                                    <path className=\"circle-bg\"\r\n                                      d=\"M18 2.0845\r\n                                        a 15.9155 15.9155 0 0 1 0 31.831\r\n                                        a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                                    />\r\n                                    <path className=\"circle\"\r\n                                      strokeDasharray={this.props.percentFullStudents.substring(0,(this.props.percentFullStudents.length - 1)) + \", 100\"}\r\n                                      d=\"M18 2.0845\r\n                                        a 15.9155 15.9155 0 0 1 0 31.831\r\n                                        a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                                    />\r\n                                    <text x=\"18\" y=\"20.35\" className=\"percentage\">{this.props.percentFullStudents}</text>\r\n                                  </svg>\r\n                                </div>\r\n                              </div>\r\n\r\n                                Spots Open: <b>{this.props.spotsAvailableForStudents} / {this.props.totalStudentParking}</b>\r\n\r\n                          </Col>\r\n                        </Row>\r\n                      </TabPane>\r\n                      <TabPane tabId=\"2\">\r\n                        <Row>\r\n                          <Col sm=\"12\">\r\n                                {/* <p><b>Employees:</b></p> */}\r\n                              \r\n                              {/* https://codepen.io/sergiopedercini/pen/jmKdbj */}\r\n                            <div className=\"flex-wrapper\">\r\n                              <div className=\"single-chart\">\r\n                                <svg viewBox=\"0 0 36 36\" className=\"circular-chart red\">\r\n                                  <path className=\"circle-bg\"\r\n                                    d=\"M18 2.0845\r\n                                      a 15.9155 15.9155 0 0 1 0 31.831\r\n                                      a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                                  />\r\n                                  <path className=\"circle\"\r\n                                    strokeDasharray={this.props.percentFullEmployees.substring(0,(this.props.percentFullEmployees.length - 1)) + \", 100\"}\r\n                                    d=\"M18 2.0845\r\n                                      a 15.9155 15.9155 0 0 1 0 31.831\r\n                                      a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                                  />\r\n                                  <text x=\"18\" y=\"20.35\" className=\"percentage\">{this.props.percentFullEmployees}</text>\r\n                                </svg>\r\n                              </div>\r\n                            </div>                    \r\n                              \r\n                             Spots Open: <b>{this.props.spotsAvailableForEmployees} / {this.props.totalEmployeeParking}</b>\r\n                          \r\n                          </Col>\r\n                        </Row>\r\n                      </TabPane>\r\n                    </TabContent>\r\n                      </div>\r\n                      </CardBody>\r\n                  </Card>\r\n          </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport GarageInfo from './components/GarageInfo';\r\nclass App extends Component \r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state= {\r\n      INPUTHERE: [],\r\n      FetchedAt: null\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    \r\n    this.getInfo();\r\n    //runs ever 5 minutes\r\n    this.interval = setInterval(this.getInfo, 300000)\r\n  }\r\n\r\n  componentWillMount()\r\n  {\r\n    // Clear the interval right before component unmount\r\n    clearInterval(this.interval);\r\n  }\r\n  \r\n  getInfo = () => \r\n  {\r\n    //Todo test api later\r\n  let FIU_API_LINK = \"https://m.fiu.edu/feeds//transit/v1/json.php?section=parking\";\r\n    fetch(FIU_API_LINK)\r\n    .then(results => {\r\n      return results.json();\r\n    })\r\n    .then( data =>{\r\n      this.setState({\r\n        INPUTHERE: data\r\n      });\r\n      console.log(data);\r\n      this.setState({\r\n        FetchedAt: this.state.INPUTHERE[0].asof\r\n      });\r\n      console.log(this.state.FetchedAt);\r\n    })\r\n    .catch(\r\n      function() \r\n      {\r\n        // This is where you run code if the server returns any errors\r\n        console.log(\"Could not get the data!\")\r\n      }\r\n    )\r\n    console.log(\"THIS WORKS!?!?!?!\");\r\n  }\r\n\r\n  render() \r\n  {\r\n\r\n    //Todo Template, Finish this later\r\n    const parkingGarageOuput = this.state.INPUTHERE.map( \r\n      (Garage) =>\r\n      {\r\n        //TODO Unsure if works.\r\n        //DEAL WITH NEGATIVE PARKING\r\n        if(Garage.StudentSpaces < 0)\r\n        {\r\n          Garage.StudentSpaces = 0;\r\n        }\r\n        if(Garage.OtherSpaces < 0)\r\n        {\r\n          Garage.OtherSpaces = 0;\r\n        }\r\n        var spotsAvailable = Garage.StudentMax - Garage.StudentSpaces;\r\n        if (spotsAvailable < 0)\r\n        {\r\n          spotsAvailable = 0;\r\n        }\r\n        var percentFull = Garage.StudentFull.substring(0,(Garage.StudentFull.length - 1));\r\n        if( percentFull > 100)\r\n        {\r\n          Garage.StudentFull = \"100%\";\r\n        }\r\n      return(\r\n        <GarageInfo\r\n        key={Garage.GarageName}\r\n        fetched={Garage.asof}\r\n        garageName={Garage.GarageName} \r\n        spotsAvailableForStudents={(spotsAvailable)}\r\n        totalStudentParking={Garage.StudentMax}\r\n        spotsAvailableForEmployees={Garage.OtherMax - Garage.OtherSpaces}\r\n        totalEmployeeParking={Garage.OtherMax}\r\n        percentFullStudents={Garage.StudentFull}\r\n        percentFullEmployees={Garage.OtherFull}\r\n        />);\r\n    })\r\n\r\n\r\n    return (\r\n      <Fragment>\r\n      <h1>\r\n      <img src=\"https://parking.fiu.edu/wp-content/uploads/2017/03/parking-sustain-transport-hrz-fiu-color.png\" alt=\"Fiu parking logo\" width=\"25%\"></img>\r\n      </h1>\r\n        <div className=\"App\">\r\n        {parkingGarageOuput}\r\n        <div style={{color:\"white\",fontSize:\"medium\"}}>Fetched at: {this.state.FetchedAt}</div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
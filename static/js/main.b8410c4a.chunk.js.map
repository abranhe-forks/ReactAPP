{"version":3,"sources":["components/GarageInfo.js","App.js","serviceWorker.js","index.js"],"names":["cardStyle","border","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","activeTab","tab","setState","_this2","react_default","a","createElement","react","className","Card","style","CardBody","CardTitle","garageName","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","Row","Col","sm","viewBox","d","strokeDasharray","percentFullStudents","substring","length","x","y","spotsAvailableForStudents","totalStudentParking","percentFullEmployees","spotsAvailableForEmployees","totalEmployeeParking","Component","getInfo","fetch","then","results","json","data","INPUTHERE","console","log","FetchedAt","asof","catch","interval","setInterval","clearInterval","parkingGarageOuput","map","Garage","StudentSpaces","OtherSpaces","components_GarageInfo","key","GarageName","fetched","StudentMax","OtherMax","StudentFull","OtherFull","src","alt","width","color","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8410c4a.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './GarageInfo.css';\nimport './test.css';\nimport {TabContent, TabPane, Nav, NavItem, NavLink, Card, CardTitle, Row, Col, CardBody} from 'reactstrap';\nimport classnames from 'classnames';\n\nconst cardStyle = {\n  border: '2px solid rgba(248, 201, 62, 0.2)'\n}\n\nclass App extends Component \n{\n  constructor(props)\n  {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = \n    {\n      activeTab: '1'\n    };\n  }\n\n  toggle(tab) \n  {\n    if (this.state.activeTab !== tab) {\n      this.setState(\n        {\n        activeTab: tab\n      });\n    }\n  }\n\n  render() \n  {\n    return (\n      <Fragment>\n          <div className=\"GarageInfo\">\n                <Card style={cardStyle}>\n                    <CardBody>\n                    <CardTitle><h3>{this.props.garageName}</h3></CardTitle>\n                    <div>\n\n                    <Nav tabs className=\"nav nav-tabs justify-content-center\">\n                      <NavItem>\n                        <NavLink\n                          className={classnames({ active: this.state.activeTab === '1' })}\n                          onClick={() => { this.toggle('1'); }}\n                        >\n                          Students\n                        </NavLink>\n                      </NavItem>\n                      <NavItem>\n                        <NavLink\n                          className={classnames({ active: this.state.activeTab === '2' })}\n                          onClick={() => { this.toggle('2'); }}\n                        >\n                          Employees\n                        </NavLink>\n                      </NavItem>\n                    </Nav>\n                    \n                    <TabContent activeTab={this.state.activeTab} >\n                      <TabPane tabId=\"1\" >\n                        <Row>\n                          <Col sm=\"12\" >\n                          {/* <p><b>Students:</b></p> */}\n\n                            <div className=\"flex-wrapper\">\n                                <div className=\"single-chart\">\n                                  <svg viewBox=\"0 0 36 36\" className=\"circular-chart red\">\n                                    <path className=\"circle-bg\"\n                                      d=\"M18 2.0845\n                                        a 15.9155 15.9155 0 0 1 0 31.831\n                                        a 15.9155 15.9155 0 0 1 0 -31.831\"\n                                    />\n                                    <path className=\"circle\"\n                                      strokeDasharray={this.props.percentFullStudents.substring(0,(this.props.percentFullStudents.length - 1)) + \", 100\"}\n                                      d=\"M18 2.0845\n                                        a 15.9155 15.9155 0 0 1 0 31.831\n                                        a 15.9155 15.9155 0 0 1 0 -31.831\"\n                                    />\n                                    <text x=\"18\" y=\"20.35\" className=\"percentage\">{this.props.percentFullStudents}</text>\n                                  </svg>\n                                </div>\n                              </div>\n\n                                Spots Open: <b>{this.props.spotsAvailableForStudents} / {this.props.totalStudentParking}</b>\n\n                          </Col>\n                        </Row>\n                      </TabPane>\n                      <TabPane tabId=\"2\">\n                        <Row>\n                          <Col sm=\"12\">\n                                {/* <p><b>Employees:</b></p> */}\n                              \n                              {/* https://codepen.io/sergiopedercini/pen/jmKdbj */}\n                            <div className=\"flex-wrapper\">\n                              <div className=\"single-chart\">\n                                <svg viewBox=\"0 0 36 36\" className=\"circular-chart red\">\n                                  <path className=\"circle-bg\"\n                                    d=\"M18 2.0845\n                                      a 15.9155 15.9155 0 0 1 0 31.831\n                                      a 15.9155 15.9155 0 0 1 0 -31.831\"\n                                  />\n                                  <path className=\"circle\"\n                                    strokeDasharray={this.props.percentFullEmployees.substring(0,(this.props.percentFullEmployees.length - 1)) + \", 100\"}\n                                    d=\"M18 2.0845\n                                      a 15.9155 15.9155 0 0 1 0 31.831\n                                      a 15.9155 15.9155 0 0 1 0 -31.831\"\n                                  />\n                                  <text x=\"18\" y=\"20.35\" className=\"percentage\">{this.props.percentFullEmployees}</text>\n                                </svg>\n                              </div>\n                            </div>                    \n                              \n                             Spots Open: <b>{this.props.spotsAvailableForEmployees} / {this.props.totalEmployeeParking}</b>\n                          \n                          </Col>\n                        </Row>\n                      </TabPane>\n                    </TabContent>\n                      </div>\n                      </CardBody>\n                  </Card>\n          </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport GarageInfo from './components/GarageInfo';\nclass App extends Component \n{\n  constructor(props)\n  {\n    super(props);\n    this.state= {\n      INPUTHERE: [],\n      FetchedAt: null\n    }\n  }\n\n  componentDidMount(){\n    \n    this.getInfo();\n    //runs ever 5 minutes\n    this.interval = setInterval(this.getInfo, 300000)\n  }\n\n  componentWillMount()\n  {\n    // Clear the interval right before component unmount\n    clearInterval(this.interval);\n  }\n  \n  getInfo = () => \n  {\n    //Todo test api later\n  let FIU_API_LINK = \"https://m.fiu.edu/feeds//transit/v1/json.php?section=parking\";\n    fetch(FIU_API_LINK)\n    .then(results => {\n      return results.json();\n    })\n    .then( data =>{\n      this.setState({\n        INPUTHERE: data\n      });\n      console.log(data);\n      this.setState({\n        FetchedAt: this.state.INPUTHERE[0].asof\n      });\n      console.log(this.state.FetchedAt);\n    })\n    .catch(\n      function() \n      {\n        // This is where you run code if the server returns any errors\n        console.log(\"Could not get the data!\")\n      }\n    )\n    console.log(\"THIS WORKS!?!?!?!\");\n  }\n\n  render() \n  {\n\n    //Todo Template, Finish this later\n    const parkingGarageOuput = this.state.INPUTHERE.map( \n      (Garage) =>\n      {\n        //TODO Unsure if works.\n        //DEAL WITH NEGATIVE PARKING\n        if(Garage.StudentSpaces < 0)\n        {\n          Garage.StudentSpaces = 0;\n        }\n        if(Garage.OtherSpaces < 0)\n        {\n          Garage.OtherSpaces = 0;\n        }\n      return(\n        <GarageInfo\n        key={Garage.GarageName}\n        fetched={Garage.asof}\n        garageName={Garage.GarageName} \n        spotsAvailableForStudents={(Garage.StudentMax - Garage.StudentSpaces)}\n        totalStudentParking={Garage.StudentMax}\n        spotsAvailableForEmployees={Garage.OtherMax - Garage.OtherSpaces}\n        totalEmployeeParking={Garage.OtherMax}\n        percentFullStudents={Garage.StudentFull}\n        percentFullEmployees={Garage.OtherFull}\n        />);\n    })\n\n\n    return (\n      <Fragment>\n      <h1>\n      <img src=\"https://parking.fiu.edu/wp-content/uploads/2017/03/parking-sustain-transport-hrz-fiu-color.png\" alt=\"Fiu parking logo\" width=\"25%\"></img>\n      </h1>\n        <div className=\"App\">\n        {parkingGarageOuput}\n        <div style={{color:\"white\",fontSize:\"medium\"}}>Fetched at: {this.state.FetchedAt}</div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}